# -*- coding: utf-8 -*-
"""players_Transfer _Fee_app .py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QW_Rrg0SZM89R6QE1rbSAgLsD_ZNiCQu
"""

!pip install streamlit
import streamlit as st
from PIL import Image
import gdown
import pickle
import numpy as np

# ----- Download model from Google Drive -----
file_id = "17YoKDtwrGL8YzRv9J3IRRnAHpAzaVYb7"   # <-- replace with your own ID
url = f"https://drive.google.com/uc?id={file_id}"

output = "model.pkl"
gdown.download(url, output, quiet=False)

# Load the model
with open(output, "rb") as f:
    model = pickle.load(f)

# ----- Function to set background image -----
def set_bg_image():
    image_url = "footballers.jpg"  # put this file in your GitHub repo
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url({image_url});
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

# Set background
set_bg_image()

# ----- App Title -----
st.title("âš½ Football Transfer Fee Predictor")

# ----- Sidebar navigation -----
page = st.sidebar.selectbox("Choose a page:", ["Home", "Single Player Prediction", "Compare Two Players"])

# ----- Team & Position mappings -----
teams = ["Real Madrid", "Barcelona", "Manchester City", "Liverpool", "Bayern Munich"]
positions = ["Goalkeeper", "Defender", "Midfielder", "Forward"]

team_mapping = {t: i for i, t in enumerate(teams)}
position_mapping = {p: i for i, p in enumerate(positions)}

# ----- Home Page -----
if page == "Home":
    st.markdown("""
        Welcome!
        Use the sidebar to choose between:
        - Predicting the transfer fee for a single player
        - Comparing transfer fees between two players
    """)
    st.markdown("**Note:** Stats like goals, assists, appearances, cards, minutes played, etc., should be entered for the **last combined 2 seasons**.")

# ----- Single Player Prediction Page -----
elif page == "Single Player Prediction":
    st.header("Predict Transfer Fee for One Player")

    # Player Info
    player_name = st.text_input("Enter Player Name:")

    st.subheader("Player Stats (for last combined 2 seasons)")
    height = st.number_input("Height (cm)", min_value=100, max_value=250, value=180)
    age = st.number_input("Age", min_value=16, max_value=50, value=25)
    appearance = st.number_input("Appearances", min_value=0, max_value=200, value=30)
    goals = st.number_input("Goals", min_value=0, max_value=200, value=10)
    assists = st.number_input("Assists", min_value=0, max_value=200, value=5)
    yellow_cards = st.number_input("Yellow Cards", min_value=0, max_value=50, value=2)
    second_yellow = st.number_input("Second Yellow Cards", min_value=0, max_value=50, value=0)
    red_cards = st.number_input("Red Cards", min_value=0, max_value=20, value=0)
    goals_conceded = st.number_input("Goals Conceded", min_value=0, max_value=200, value=25)
    clean_sheets = st.number_input("Clean Sheets", min_value=0, max_value=50, value=10)
    minutes_played = st.number_input("Minutes Played", min_value=0, max_value=10000, value=2000)
    days_injured = st.number_input("Days Injured", min_value=0, max_value=365, value=0)
    games_injured = st.number_input("Games Injured", min_value=0, max_value=100, value=0)

    # New: Team and Position
    team = st.selectbox("Team", teams)
    position = st.selectbox("Position", positions)

    team_encoded = team_mapping[team]
    position_encoded = position_mapping[position]

    if st.button("Predict Transfer Fee"):
        features = np.array([[height, age, appearance, goals, assists, yellow_cards,
                              second_yellow, red_cards, goals_conceded, clean_sheets,
                              minutes_played, days_injured, games_injured,
                              team_encoded, position_encoded]])

        predicted_fee = model.predict(features)[0]
        st.success(f"Predicted Transfer Fee for {player_name}: â‚¬{predicted_fee:,.0f}")

# ----- Compare Two Players Page -----
elif page == "Compare Two Players":
    st.header("Compare Two Players Transfer Fees")

    # Player 1
    st.subheader("Player 1 Stats")
    player1_name = st.text_input("Player 1 Name:")
    height1 = st.number_input("Height (cm) P1", min_value=100, max_value=250, value=180, key="h1")
    age1 = st.number_input("Age P1", min_value=16, max_value=50, value=25, key="a1")
    appearance1 = st.number_input("Appearances P1", min_value=0, max_value=200, value=30, key="app1")
    goals1 = st.number_input("Goals P1", min_value=0, max_value=200, value=10, key="g1")
    assists1 = st.number_input("Assists P1", min_value=0, max_value=200, value=5, key="as1")
    yellow_cards1 = st.number_input("Yellow Cards P1", min_value=0, max_value=50, value=2, key="y1")
    second_yellow1 = st.number_input("Second Yellow Cards P1", min_value=0, max_value=50, value=0, key="s1")
    red_cards1 = st.number_input("Red Cards P1", min_value=0, max_value=20, value=0, key="r1")
    goals_conceded1 = st.number_input("Goals Conceded P1", min_value=0, max_value=200, value=25, key="gc1")
    clean_sheets1 = st.number_input("Clean Sheets P1", min_value=0, max_value=50, value=10, key="cs1")
    minutes_played1 = st.number_input("Minutes Played P1", min_value=0, max_value=10000, value=2000, key="mp1")
    days_injured1 = st.number_input("Days Injured P1", min_value=0, max_value=365, value=0, key="di1")
    games_injured1 = st.number_input("Games Injured P1", min_value=0, max_value=100, value=0, key="gi1")

    team1 = st.selectbox("Team P1", teams, key="team1")
    position1 = st.selectbox("Position P1", positions, key="pos1")

    team_encoded1 = team_mapping[team1]
    position_encoded1 = position_mapping[position1]

    # Player 2
    st.subheader("Player 2 Stats")
    player2_name = st.text_input("Player 2 Name:")
    height2 = st.number_input("Height (cm) P2", min_value=100, max_value=250, value=180, key="h2")
    age2 = st.number_input("Age P2", min_value=16, max_value=50, value=25, key="a2")
    appearance2 = st.number_input("Appearances P2", min_value=0, max_value=200, value=30, key="app2")
    goals2 = st.number_input("Goals P2", min_value=0, max_value=200, value=10, key="g2")
    assists2 = st.number_input("Assists P2", min_value=0, max_value=200, value=5, key="as2")
    yellow_cards2 = st.number_input("Yellow Cards P2", min_value=0, max_value=50, value=2, key="y2")
    second_yellow2 = st.number_input("Second Yellow Cards P2", min_value=0, max_value=50, value=0, key="s2")
    red_cards2 = st.number_input("Red Cards P2", min_value=0, max_value=20, value=0, key="r2")
    goals_conceded2 = st.number_input("Goals Conceded P2", min_value=0, max_value=200, value=25, key="gc2")
    clean_sheets2 = st.number_input("Clean Sheets P2", min_value=0, max_value=50, value=10, key="cs2")
    minutes_played2 = st.number_input("Minutes Played P2", min_value=0, max_value=10000, value=2000, key="mp2")
    days_injured2 = st.number_input("Days Injured P2", min_value=0, max_value=365, value=0, key="di2")
    games_injured2 = st.number_input("Games Injured P2", min_value=0, max_value=100, value=0, key="gi2")

    team2 = st.selectbox("Team P2", teams, key="team2")
    position2 = st.selectbox("Position P2", positions, key="pos2")

    team_encoded2 = team_mapping[team2]
    position_encoded2 = position_mapping[position2]

    if st.button("Compare Transfer Fees"):
        # Features for both players
        features1 = np.array([[height1, age1, appearance1, goals1, assists1, yellow_cards1,
                               second_yellow1, red_cards1, goals_conceded1, clean_sheets1,
                               minutes_played1, days_injured1, games_injured1,
                               team_encoded1, position_encoded1]])

        features2 = np.array([[height2, age2, appearance2, goals2, assists2, yellow_cards2,
                               second_yellow2, red_cards2, goals_conceded2, clean_sheets2,
                               minutes_played2, days_injured2, games_injured2,
                               team_encoded2, position_encoded2]])

        # Predictions
        fee1 = model.predict(features1)[0]
        fee2 = model.predict(features2)[0]

        st.success(f"Predicted Transfer Fee for {player1_name}: â‚¬{fee1:,.0f}")
        st.success(f"Predicted Transfer Fee for {player2_name}: â‚¬{fee2:,.0f}")

        if fee1 > fee2:
            st.info(f"ðŸ’¡ {player1_name} has a higher predicted value than {player2_name}.")
        elif fee2 > fee1:
            st.info(f"ðŸ’¡ {player2_name} has a higher predicted value than {player1_name}.")
        else:
            st.info("ðŸ’¡ Both players have the same predicted transfer fee!")

print(model.n_features_in_)

print(model.feature_names_in_)